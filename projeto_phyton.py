# -*- coding: utf-8 -*-
"""Projeto_Phyton.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c9Zv2VHwRZf9uQlh9tYs3zz6Uw-hfWIr
"""

import numpy as np 
  import time
  import matplotlib.pyplot as plt
  np.set_printoptions (precision=3)

  def insertionSort(arr):
      for i in range (1, len (arr)):
          key = np.copy (arr[i])
          j = i-1
          while j >= 0 and key < arr[j] :
              arr[j + 1] = arr[j]
              j-= 1 
              arr[j + 1] = key
                        
                    
  def mergeSort(arr): 
      if len (arr) > 1:
          mid = len (arr)//2
          L = np.copy (arr[:mid])
          R = np.copy (arr[mid:])
          
          mergeSort (L) 
          mergeSort (R)
          
          i = j = k = 0 
          while i < len(L) and j < len (R):
              if L[i] < R[j]:
                  arr[k] = L[i]
                  i += 1
              else:
                  arr[k] = R[j]
                  j += 1
              k += 1 
          while i < len(L) :
              arr[k] = L[i]
              i += 1
              k += 1
          while j < len(R):
              arr[k] = R[j]
              j += 1
              k += 1
              
              
  def partition (arr, low, high):
      i = (low-1)
      pivot = np.copy (arr[high])
      for j in range (low, high):
          if arr[j] <= pivot:
              i = i+1
              arr[i], arr[j] = np.copy(arr[j]), np. copy(arr[i])
      arr[i+1], arr[high] = np.copy (arr[high]),np. copy (arr[i+1])
      return (i+1)

  def quickSort (arr, low=0, high=None): 
          if high == None:
              high = len (arr)-1 
          if len (arr) == 1:
              return arr 
          if low < high:
              pi = partition (arr, low, high)
              quickSort (arr, low, pi-1)
              quickSort (arr, pi+1, high)


  def tudo(i):
      arr_1 = np.random.rand (i,1)*10
      
      iArray = np.copy (arr_1)
      mArray = np.copy (arr_1)
      qArray = np.copy (arr_1)
      
      timeArray = []
      
      
      start_time = time.time()
      insertionSort(iArray)
      timeArray.append(time.time() - start_time)
      
      
      start_time = time.time()
      mergeSort(mArray)
      timeArray.append(time.time() - start_time)
      
      
      start_time = time.time()
      quickSort (qArray)
      timeArray.append(time.time() - start_time)
      
      return timeArray

  tudoArr = [500,1000,2000,4000,8000,10000]
  getAllTime = []
  for i in tudoArr:
      getAllTime.append(tudo(i))
      
      
  getInsertOnly = []
  getMergeOnly = []
  getQuickOnly = []     
  for i in getAllTime:
      getInsertOnly.append(i[0])
      getMergeOnly.append(i[1])
      getQuickOnly.append(i[2])
      
      
  names = ['insert', 'merge', 'quick']
  fig  = plt.figure(figsize=(22, 12))
  plt.subplot(2,3,1)

  #plt.title('Insert & Merge & Quick')
  a = plt.scatter(tudoArr,getInsertOnly, label='Insert',color='r')
  plt.plot(tudoArr,getInsertOnly)
  b = plt.scatter(tudoArr,getMergeOnly, label='Merge',color='b')
  plt.plot(tudoArr,getMergeOnly)
  c = plt.scatter(tudoArr,getQuickOnly, label='Quick',color='g')
  plt.plot(tudoArr,getQuickOnly)
  plt.xlabel("Elementos")
  plt.ylabel("Tempo")

  plt.legend((a, b, c),
            ('Insert', 'Merge', 'Quick'),
            scatterpoints=1,
            loc='upper left',
            ncol=3,
            fontsize=8)


  plt.subplot(2,3,2)
  #plt.title('Merge & Quick')
  a = plt.scatter(tudoArr,getMergeOnly, label='Merge',color='b')
  plt.plot(tudoArr,getMergeOnly)
  b = plt.scatter(tudoArr,getQuickOnly, label='Quick',color='g')
  plt.plot(tudoArr,getQuickOnly)
  plt.xlabel("Elementos")
  plt.ylabel("Tempo")

  plt.legend((a, b),
            ('Merge', 'Quick'),
            scatterpoints=1,
            loc='upper left',
            ncol=3,
            fontsize=8)


  c = plt.subplot(2,3,4)

  a = plt.bar(tudoArr,getInsertOnly, fc='crimson', ec='navy')


  #plt.bar_label(a, [''] + [f'{(getInsertOnly1 - getInsertOnly0) / getInsertOnly0 * 100:+.2f}%' for getInsertOnly0, getInsertOnly1 in zip(getInsertOnly[:-1], getInsertOnly[1:])])
  auxArray = [f'{(getInsertOnly1 - getInsertOnly0) / getInsertOnly0 * 100:+.2f}%' for getInsertOnly0, getInsertOnly1 in zip(getInsertOnly[:-1], getInsertOnly[1:])]
  auxArray.insert(0, '0%')
  count = 0
  for p in a:
      height = p.get_height()
      c.text(x=p.get_x() + p.get_width() / 2, y=height    ,
        s=auxArray[count].format(height),
        ha='center')
      count += 1  

  plt.margins(y=0.1)

  plt.plot(tudoArr,getInsertOnly)
  plt.xlabel("Elementos")
  plt.ylabel("Tempo")

  colors = {'Insert':'blue'}
  labels = list(colors.keys())
  handles = [plt.Rectangle((0,0),1,1, color=colors[label]) for label in labels]
  plt.legend(handles, labels)



  c = plt.subplot(2,3,5)

  a = plt.bar(tudoArr,getMergeOnly, fc='crimson', ec='navy')

  #plt.bar_label(a, [''] + [f'{(getMergeOnly1 - getMergeOnly0) / getMergeOnly0 * 100:+.2f}%' for getMergeOnly0, getMergeOnly1 in zip(getMergeOnly[:-1], getMergeOnly[1:])])
  auxArray = [f'{(getMergeOnly1 - getMergeOnly0) / getMergeOnly0 * 100:+.2f}%' for getMergeOnly0, getMergeOnly1 in zip(getMergeOnly[:-1], getMergeOnly[1:])]
  auxArray.insert(0, '0%')
  count = 0
  for p in a:
      height = p.get_height()
      c.text(x=p.get_x() + p.get_width() / 2, y=height,
        s=auxArray[count].format(height),
        ha='center')
      count += 1  

  plt.margins(y=0.1)

  plt.plot(tudoArr,getMergeOnly)
  plt.xlabel("Elementos")
  plt.ylabel("Tempo")

  colors = {'Merge':'blue'}
  labels = list(colors.keys())
  handles = [plt.Rectangle((0,0),1,1, color=colors[label]) for label in labels]
  plt.legend(handles, labels)


  c = plt.subplot(2,3,6)


  a = plt.bar(tudoArr,getQuickOnly, fc='crimson', ec='navy')

  #plt.bar_label(a, [''] + [f'{(getQuickOnly1 - getQuickOnly0) / getQuickOnly0 * 100:+.2f}%' for getQuickOnly0, getQuickOnly1 in zip(getQuickOnly[:-1], getQuickOnly[1:])])
  auxArray = [f'{(getQuickOnly1 - getQuickOnly0) / getQuickOnly0 * 100:+.2f}%' for getQuickOnly0, getQuickOnly1 in zip(getQuickOnly[:-1], getQuickOnly[1:])]
  auxArray.insert(0, '0%')
  count = 0
  for p in a:
      height = p.get_height()
      c.text(x=p.get_x() + p.get_width() / 2, y=height,
        s=auxArray[count].format(height),
        ha='center')
      count += 1

  plt.margins(y=0.1)

  plt.plot(tudoArr,getQuickOnly)
  plt.xlabel("Elementos")
  plt.ylabel("Tempo")

  colors = {'Quick':'blue'}
  labels = list(colors.keys())
  handles = [plt.Rectangle((0,0),1,1, color=colors[label]) for label in labels]
  plt.legend(handles, labels)

  plt.suptitle('Final Test')

  plt.show()